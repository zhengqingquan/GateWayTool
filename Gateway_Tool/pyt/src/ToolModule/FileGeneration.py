import datetime
import getpass
import os
import logging
from pathlib import Path
from typing import AnyStr, List

from pyt.src import SoftwareInfo
from pyt.src.ToolModule.FuncTool import runTimeMsg
from pyt.src.config.FileDealConfig import FileDealConfig


def generate_HeadFileIfndef(filePath: AnyStr, projectPrefix: AnyStr = '') -> None:
    """
    针对C/C++语言，添加防止头文件重复包含的宏定义。
    :param filePath: 文件路径。
    :param projectPrefix: 工程前缀，在宏名前添加前缀。
    """

    fileConfig: FileDealConfig = FileDealConfig()

    if fileConfig.HeadFileDefType == 'ifndef':
        # 把字符中的"."替换成"_"，并将字符转为大写。
        fileName = Path(filePath).name.replace('.', '_').upper()
        macroName = f'_{projectPrefix}_{fileName}__'
        head = f'# ifndef {macroName}\n' \
               f'# define {macroName}\n' \
               f'\n'
        end = f'\n\n#endif // {macroName}\n'
    elif fileConfig.HeadFileDefType == 'max':
        # 把字符中的"."替换成"_"，并将字符转为大写。
        fileName = Path(filePath).name.replace('.', '_').upper()
        macroName = f'_{projectPrefix}_{fileName}__'
        head = f'#pragma once\n' \
               f'# ifndef {macroName}\n' \
               f'# define {macroName}\n' \
               f'\n'
        end = f'\n\n#endif // {macroName}\n'
    else:
        head = '#pragma once\n\n'
        end = ''

    # 写入开头
    with open(filePath, mode='r+', encoding='utf-8') as file:
        old = file.read()
        file.seek(0)
        file.writelines(head)
        file.writelines(old)

    # 写入结尾
    with open(filePath, 'a+', encoding='utf-8') as file:
        file.writelines(end)


def generate_HeadFileInclude(filePath: AnyStr, stdHeadList: list[AnyStr], cusHeadList: list[AnyStr],
                             isSort=False) -> None:
    """
    针对C/C++语言，向文件开头添加文件引用命令。
    :param filePath: 文件路径
    :param stdHeadList: 需要添加的标准文件路径列表。
    :param cusHeadList: 需要添加的自定义文件路径列表。
    :param isSort: 是否需要排序。
    """

    # 列表非空检查
    for headFile in stdHeadList:
        if not headFile.strip():
            stdHeadList.remove(headFile)
    for headFile in cusHeadList:
        if not headFile.strip():
            cusHeadList.remove(headFile)
    if not len(stdHeadList) and not len(cusHeadList):
        return

    # 排序
    if isSort:
        stdHeadList.sort()
        cusHeadList.sort()

    # 字符串拼接
    head = ''
    if len(stdHeadList):
        for headFile in stdHeadList:
            head = f'{head}' \
                   f'#include <{headFile}>\n'
        head = f'{head}\n'
    if len(cusHeadList):
        for headFile in cusHeadList:
            head = f'{head}' \
                   f'#include "{headFile}"\n'
        head = f'{head}\n'
    head = f'{head}\n'

    # 写入开头
    with open(filePath, mode='r+', encoding='utf-8') as file:
        old = file.read()
        file.seek(0)
        file.writelines(head)
        file.writelines(old)


# TODO brief和attention如果换行也需要进行对齐。
# TODO 该函数的异常处理可能需要重新考虑，可以抛给上层。
@runTimeMsg(r'生成描述')
def generate_description(filePath: AnyStr, brief: str = '', attention: str = '') -> None:
    """
    在一个文件的开头和末尾加上自动生成的文件说明。
    :param filePath: 需要添加说明的文件的路径。
    :param brief: 简述说明
    :param attention: 注意说明
    :return: None
    """

    # 文件说明
    __file = os.path.basename(filePath)
    __author = getpass.getuser()
    __note = f'The code is automatically generated by {SoftwareInfo.SOFTWARE_NAME}'
    __version = SoftwareInfo.SOFTWARE_VERSION
    __time = datetime.datetime.now().strftime('%Y.%m.%d, %H:%M:%S')
    __brief = brief
    __attention = attention

    __fileComments = {'@file:': __file,
                      '@author:': __author,
                      '@note:': __note,
                      '@version:': __version,
                      '@date:': __time,
                      '@brief:': __brief,
                      '@attention:': __attention
                      }

    # 生成开头
    comments_head = '/**\n'
    maxLen = len(max(__fileComments.keys(), key=len, default=''))  # 查找字典中最长的字符串，用于对齐。
    for key in __fileComments.keys():
        alignSpaceAmount = maxLen - len(key) + 4  # 计算空格量
        alignSpace = ' ' * alignSpaceAmount
        comments_head = f'{comments_head}* {key}{alignSpace}{__fileComments[key]}\n'
    comments_head = f'{comments_head}' \
                    f'**/\n\n'

    # 生成结尾
    comments_end = '\n\n/******** END OF FILE ********/\n'

    # 写入文件
    try:
        with open(filePath, mode='r+', encoding='utf-8') as file:  # 写入开头
            old = file.read()
            file.seek(0)
            file.writelines(comments_head)
            file.writelines(old)
        with open(filePath, 'a+', encoding='utf-8') as file:  # 写入结尾
            file.writelines(comments_end)
    except FileNotFoundError as e:
        logging.error('生成说明描述失败。')
        logging.error(f'找不到以下文件：{os.path.abspath(e.filename)}')
    except IOError as e:
        logging.error('生成说明描述失败。')
        logging.error(f'IO错误，{os.path.abspath(e.filename)}')
